#pragma warning(disable:4996)
#pragma once
//-------------------------------------------------------------------
//３Ｄマップ
//-------------------------------------------------------------------
#include "MyPG.h"
#include "MapBox.h"
#include "MapObject.h"

namespace Map
{
	//タスクに割り当てるグループ名と固有名
	const  string  defGroupName("フィールド");	//グループ名
	const  string  defName("マップ");	//タスク名
	//-------------------------------------------------------------------
	class  Resource
	{
		bool  Initialize();
		bool  Finalize();
		Resource();
	public:
		~Resource();
		typedef  shared_ptr<Resource>	SP;
		typedef  weak_ptr<Resource>		WP;
		static   WP  instance;
		static  Resource::SP  Create();
		//共有する変数はここに追加する
		//イメージ名
		string imageName;
	};
	//-------------------------------------------------------------------
	class  Object : public  BTask
	{
	//変更不可◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆
	public:
		virtual  ~Object();
		typedef  shared_ptr<Object>		SP;
		typedef  weak_ptr<Object>		WP;
		//生成窓口 引数はtrueでタスクシステムへ自動登録
		static  Object::SP  Create(bool flagGameEnginePushBack_);
		Resource::SP	res;
	private:
		Object();
		bool  B_Initialize();
		bool  B_Finalize();
		bool  Initialize();	//「初期化」タスク生成時に１回だけ行う処理
		void  UpDate();		//「実行」１フレーム毎に行う処理
		void  Render2D_AF();	//「2D描画」１フレーム毎に行う処理
		bool  Finalize();		//「終了」タスク消滅時に１回だけ行う処理
		void  Render3D_L0();
		//変更可◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇◇
		//追加したい変数・メソッドはここに追加する
		int			sizeX, sizeZ;		//マップtxt毎の範囲サイズ
		int			maxSizeX, maxSizeZ;	//マップのX・Zの最大サイズ
		int			tmpX, tmpZ;			//マップを設定するときの基準値
		Box			arr[100][100];		//マップ全体のarr[z][x]
		Box			floor, ceiling;		//天井と床
		Box			goal;				//ゴール
		string		fileName;			//読み取るマップの名前
		string		filePath;			//マップファイル読み取り時のパス

		std::vector<MapObj*> mapObjects;//マップオブジェクト用ベクター

	public:
		//メソッド------------------------------------------------------
		//マップの読み込み
		bool  Load_Map();
		//オブジェクトの読み込み
		bool  Load_Objects();
		//当たり判定
		//引数(マップとの判定を行う相手の当たり判定範囲)
		bool Map_CheckHit(const ML::Box3D& pHit);
		//ゴールに接触しているかを返す
		bool Goal_CheckHit(const ML::Box3D& pHit);
	};
}